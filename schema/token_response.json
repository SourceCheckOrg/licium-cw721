{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "TokenResponse",
  "type": "object",
  "required": [
    "license_price",
    "license_url",
    "name",
    "token_id"
  ],
  "properties": {
    "description": {
      "type": [
        "string",
        "null"
      ]
    },
    "image": {
      "description": "\"A URI pointing to a resource with mime type image/* representing the asset to which this NFT represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive. TODO: Use https://docs.rs/url_serde for type-safety",
      "type": [
        "string",
        "null"
      ]
    },
    "license_price": {
      "$ref": "#/definitions/Coin"
    },
    "license_url": {
      "type": "string"
    },
    "name": {
      "description": "Describes the asset to which this NFT represents",
      "type": "string"
    },
    "token_id": {
      "type": "string"
    }
  },
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
