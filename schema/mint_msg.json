{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MintMsg",
  "type": "object",
  "required": [
    "description",
    "image",
    "iscc_code",
    "license_price",
    "license_url",
    "name",
    "owner",
    "token_id",
    "tophash"
  ],
  "properties": {
    "description": {
      "description": "Describes the asset to which this NFT represents (may be empty)",
      "type": "string"
    },
    "image": {
      "description": "A URI pointing to an image representing the asset",
      "type": "string"
    },
    "iscc_code": {
      "description": "ISCC code",
      "type": "string"
    },
    "license_price": {
      "description": "Price to license",
      "allOf": [
        {
          "$ref": "#/definitions/Coin"
        }
      ]
    },
    "license_url": {
      "description": "License url",
      "type": "string"
    },
    "name": {
      "description": "Identifies the asset to which this NFT represents",
      "type": "string"
    },
    "owner": {
      "description": "The owner of the newly minter NFT",
      "type": "string"
    },
    "token_id": {
      "description": "Unique ID of the NFT",
      "type": "string"
    },
    "tophash": {
      "description": "Tophash",
      "type": "string"
    }
  },
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
